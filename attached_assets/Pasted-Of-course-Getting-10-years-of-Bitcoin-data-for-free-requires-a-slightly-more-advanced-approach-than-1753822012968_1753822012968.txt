Of course. Getting 10 years of Bitcoin data for free requires a slightly more advanced approach than a single API call, but it's definitely achievable.
The best method is to write a Python script that loops through the Binance API, fetching the data in 1,000-day chunks. Alternatively, you can download a complete historical dataset from a platform like Kaggle.
## Method 1: The Python Script (Most Powerful)
This script automates the process of fetching data chunk-by-chunk and stitching it together. It's the most robust solution for getting up-to-date, long-term history.
Python Code to Fetch 10+ Years of Data
import pandas as pd
import requests
import time
from datetime import datetime

def fetch_full_btc_history(years: int = 10) -> pd.Series:
    """
    Fetches a long-term history of daily BTC closing prices from the
    Binance public API by fetching data in 1000-day chunks.

    Args:
        years: The number of years of history to retrieve.

    Returns:
        A pandas Series with daily closing prices indexed by date.
    """
    print(f"📈 Fetching the last {years} years of BTC history from Binance...")
    
    # Binance API parameters
    url = "https://api.binance.com/api/v3/klines"
    symbol = 'BTCUSDT'
    interval = '1d'
    limit = 1000 # Max limit per request
    
    # Calculate the start date
    end_ts = int(datetime.now().timestamp() * 1000)
    
    all_data = []
    
    while len(all_data) < (years * 365):
        params = {
            'symbol': symbol,
            'interval': interval,
            'endTime': end_ts,
            'limit': limit
        }
        
        try:
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            data = response.json()
            
            if not data:
                # No more data to fetch
                break
                
            all_data.extend(data)
            
            # The new end_ts is the timestamp of the oldest record fetched
            oldest_point = data[0]
            end_ts = oldest_point[0] - 1 # Subtract 1ms to avoid overlap
            
            print(f"  Fetched {len(data)} records, going back to {datetime.fromtimestamp(end_ts/1000).strftime('%Y-%m-%d')}...")
            
            # Be polite to the API
            time.sleep(0.5)

        except requests.exceptions.RequestException as e:
            print(f"❌ API call failed: {e}")
            return None
            
    if not all_data:
        return None

    # Process the combined data
    df = pd.DataFrame(all_data, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time',
        'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume',
        'taker_buy_quote_asset_volume', 'ignore'
    ])
    
    df['Date'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df.set_index('Date')
    
    # Remove duplicates and sort chronologically
    df = df[~df.index.duplicated(keep='first')]
    df = df.sort_index()
    
    btc_series = df['close'].astype(float)
    
    print(f"\n✅ Successfully fetched a total of {len(btc_series)} days of data.")
    return btc_series

# --- Example of how to run the function ---
if __name__ == "__main__":
    btc_10yr_history = fetch_full_btc_history(years=10)
    
    if btc_10yr_history is not None:
        print("\n--- BTC Price History ---")
        print(f"Oldest Entry: {btc_10yr_history.index[0].strftime('%Y-%m-%d')} -> ${btc_10yr_history.iloc[0]:,.2f}")
        print(f"Most Recent Entry: {btc_10yr_history.index[-1].strftime('%Y-%m-%d')} -> ${btc_10yr_history.iloc[-1]:,.2f}")

## Method 2: Direct CSV Download (Easiest)
If you prefer not to run a script, you can download a comprehensive historical dataset directly.
Recommended Source: Kaggle
Kaggle is a data science community that hosts free, high-quality datasets. It's the most reliable place to get a clean, long-term CSV file for Bitcoin.
 * Go to Kaggle: Search for "Bitcoin Historical Data".
 * Select a Dataset: Look for one with recent updates and a high usability score. The "Bitcoin Historical Data" by Zielak is a very popular and well-maintained choice.
 * Download: Click the "Download" button to get a ZIP file containing the CSV. You can then load this file directly into your Python script using pd.read_csv().
